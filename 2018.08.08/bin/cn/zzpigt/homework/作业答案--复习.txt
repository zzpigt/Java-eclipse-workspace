
#1. 了解享元模式

2. 简述Object类中的方法

 equals toString hashCode 

 clone finalize

 getClass notify notifyAll wait

3. 简述 equals toString hashCode的方法作用，以及重写的要求

 equals 
	可以比较两个对象内容是否“相等”
	默认实现就是 ==，也就是两个引用是否指向同一个对象
	但是可以通过重写这个方法来自己指定比较的规则

 hashCode 
	返回这个对象的哈希码值
	哈希码值有3个规则
	1. 同一个对象，多次调用hashCode，结果【必须】一致
	2. equals认为相等的对象，调用hashCode，结果【必须】一致
	3. equals认为不想等的对象，调用hashCode，结果【最好】不一致

	# hashCode的默认实现，是生成一个和物理地址有关的一个整数

 toString 
	返回这个对象的字符串形式
	默认实现是 返回 类名@十六进制的hashCode
	可以通过重写这个方法，打印出对象的成员属性的值，方便程序员进行调试

4. 简述为什么重写equals方法后一定要重写hashCode
	因为equals方法是用来比较两个对象内容是否相等，
	默认实现其实比较地址，重写equals往往是为了比较成员属性是否完全一致
	会导致原来equals认为不想等的对象重写之后就相等了

	但是由于这些对象的地址肯定不相等，所以默认的hashCode大概率不相等
	这种情况就违背了hashCode的第二个规则，这个会导致程序可能会出错

5. 简述基本类型以及对应包装类的区别
	以int和Integer为例
	
	1. int是java中的基本类型，Integer是属于引用类型
	基本类型和引用类型的区别主要在：大小、速度、存储结构、缺省值
	
	2. 作为局部变量时，int存放在栈中，占用4个字节，存取速度比较快
	而Integer的对象存放在堆中，占用更多的内存空间，存取速度比较慢

	3. int的默认值是0，Integer的默认值是null，Integer可以区分0和null的区别
	这是基本类型做不到的

	4. Integer提供了很多与整数有关的静态方法，比如把一个字符串转化成整数
	或者把一个整数转化成二进制、八进制、十六进制的字符串
	也提供了一些静态常量表示int的最大值和最小值

	5. int一般用作数学运算中，Integer则经常用于容器中存取数据






