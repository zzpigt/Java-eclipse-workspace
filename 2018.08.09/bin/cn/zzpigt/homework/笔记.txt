


【泛型 Generic】
	参数化类型

	为什么要使用泛型？
	当我想做一个容器类型时，希望可以保存任意类型的数据，
	往往会把存放的方法参数设置为Object类
	取出方法的返回值也设置为Object类，
	但是这样在使用时，无法保证存放和取出的类型是同一种类型
	这样的话当我做强制类型转换时，就无法保证程序会正常运行

	如果希望存放和取出的是同样的任意类型，
	就必须要使用参数化类型来指定参数的类型，
	这个技术就叫做泛型

 1. 泛型接口

 2. 泛型类

 3. 泛型方法

 4. 通配符
	?  		匹配任意类型
	? super A 	匹配A的父类包括A（下边界）
	? extends A 	匹配A的子类包括A（上边界）

 5. 类型推测（JDK7 新特性）


 #6. 类型擦除
	泛型技术是JDK5的新特性，并没有为这个技术修改JVM，
	仅仅是修改了javac
	就导致泛型技术仅仅在编译的一瞬间才生效，运行时没有效果



【链表】

 泛型在实际开发中，往往会用作容器类型的制作

 动态数组 ArrayList：可以用数组保存任意多数量的对象
	但是动态数组有一个问题，当我们频繁的添加和删除对象时，往往会涉及到某一范围内的元素集体复制等操作
	是一个非常效率低下的操作

 链表 LinkedList：保存任意多个数量的

 考虑：链表要如何实现呢？

 

	

