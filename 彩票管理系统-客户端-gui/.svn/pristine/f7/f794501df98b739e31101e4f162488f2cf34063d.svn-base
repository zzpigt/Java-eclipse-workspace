package com.bwf.view;

import com.bwf.client.ClientDemo;
import com.bwf.jar.MyRequest;
import com.bwf.jar.MyResponse;
import com.bwf.util.UiUtil;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

/**
 *
 * @author Administrator
 */
@SuppressWarnings("serial")
public class LoginFrame extends JFrame {

	// Variables declaration - do not modify
	private JButton jButton1;
	private JButton jButton2;
	private JButton jButton3;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JLabel jLabel4;
	private JPasswordField jpfPassword;
	private JTextField jtfUsername;
	private JComboBox selectBox;

	private ObjectOutputStream oos;
	private String uName;

	public LoginFrame(ObjectOutputStream oos) {
		this.oos = oos;

		initComponents();
		init();
	}

	private void init() {
		this.setTitle("登录界面");
		// 不可调大小
		this.setResizable(false);
		UiUtil.setFrameCenter(this);
		UiUtil.setFrameImage(this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	@SuppressWarnings("unchecked")
	private void initComponents() {

		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		jtfUsername = new JTextField();
		jpfPassword = new JPasswordField();
		jButton1 = new JButton();
		jButton2 = new JButton();
		jButton3 = new JButton();
		jLabel3 = new JLabel();
		jLabel4 = new JLabel();
		selectBox = new JComboBox();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("用户名：");
		jLabel2.setText("密码：");

		jpfPassword.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jpfPasswordActionPerformed(evt);
			}
		});

		jButton1.setText("登录");
		jButton1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					jButton1ActionPerformed(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		});

		jButton2.setText("重置");
		jButton2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("注册");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		jLabel3.setFont(new Font("宋体", 0, 18)); // NOI18N
		jLabel3.setForeground(new Color(0, 51, 255));
		jLabel3.setText("欢迎购买 中国福利彩票");

		selectBox.setModel(new DefaultComboBoxModel(new String[] { "彩民", "管理员", "公证员" }));
		selectBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				selectBoxActionPerformed(evt);
			}
		});

		jLabel4.setText("权限：");

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGap(96, 96, 96).addComponent(jLabel3))
						.addGroup(layout.createSequentialGroup().addGap(54, 54, 54).addGroup(layout
								.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(jButton1)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addComponent(jLabel1).addComponent(jLabel2).addComponent(jLabel4)))
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup().addGap(56, 56, 56)
												.addComponent(jButton2)
												.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 61,
														Short.MAX_VALUE)
												.addComponent(jButton3))
										.addGroup(layout.createSequentialGroup().addGap(18, 18, 18).addGroup(layout
												.createParallelGroup(GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
																.addComponent(jtfUsername, GroupLayout.DEFAULT_SIZE,
																		189, Short.MAX_VALUE)
																.addComponent(jpfPassword))
												.addComponent(selectBox, GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
												.addGap(0, 0, Short.MAX_VALUE)))))
				.addGap(40, 40, 40)));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addGap(36, 36, 36).addComponent(jLabel3).addGap(36, 36, 36)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(
						jtfUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(36, 36, 36)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(
						jpfPassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
				.addGap(29, 29, 29)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
						.addComponent(selectBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel4))
				.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
				.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jButton1)
						.addComponent(jButton2).addComponent(jButton3))
				.addGap(30, 30, 30)));

		pack();
	}

	private void jpfPasswordActionPerformed(ActionEvent evt) {
		// 监听密码
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
		/*
		 * 思路 A：获取用户名和密码 B: 正则表达式校验用户名和密码 C: 创建对象调用功能，返回一个boolean值 D：更具boolean值给出提示
		 */
		String uName = this.jtfUsername.getText().trim();
		String uPwd = this.jpfPassword.getText().trim();
		// 下拉框
		// 三个身份（1-彩民，2-管理员，3-公证员）这个身份也决定了服务器从那个表中查询数据
		String level = this.selectBox.getSelectedItem().toString().trim();

//		regUserNamePwd(uName, uPwd);// 正则表达式验证用户名和密码

		// 包装成一个类
		MyRequest request = new MyRequest(MyRequest.TYPE_LOGIN);
		request.getUmap().put(MyRequest.MEG_USERNAME, uName);
		request.getUmap().put(MyRequest.MEG_USERPWD, uPwd);
		request.getUmap().put(MyRequest.MEG_LEVEL, level);
		// 包装好了，就发送过去，序列化
		oos.writeObject(request);
		oos.flush();

		synchronized (ClientDemo.class) {
			if (ClientDemo.lastResponse == null) {
				try {
					ClientDemo.class.wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			// 读到了消息
			MyResponse lastResponse = ClientDemo.lastResponse;
			ClientDemo.lastResponse = null;
			/* 有个打印 */
			System.out.println(lastResponse.getrMeg().get(MyResponse.MEG_CONTENT));
			// 判断登入是否成功，成功则进入操作界面，不成功就返回到开始界面
			if (lastResponse.isSuccess()) {
				// 操作界面
				this.uName = uName;
				JOptionPane.showMessageDialog(this, lastResponse.getrMeg().get(MyResponse.LETTERY_CONTENT));
				// 加打印测试
				System.out.println(uName);
				System.out.println(lastResponse.getrMeg().get(MyResponse.MEG_MONEY));
				// operateMenu(level);//登入成功后三个身份界面
			} else {
				JOptionPane.showMessageDialog(this, lastResponse.getrMeg().get(MyResponse.LETTERY_CONTENT));
				this.jtfUsername.setText("");
				this.jpfPassword.setText("");
				this.jtfUsername.requestFocus();
				return;
			}
			/***
			 * 跳转处
			 **/
			switch (level) {
			case "彩民":
				BuyerFrame bf = new BuyerFrame(oos, lastResponse, uName);
				bf.setVisible(true);
				this.dispose();
				break;
			case "管理员":
				AdminFrame af = new AdminFrame(oos, lastResponse, uName);
				af.setVisible(true);
				this.dispose();
				break;
			case "公证员":
				GrefFrame gf = new GrefFrame(oos, lastResponse, uName);
				gf.setVisible(true);
				this.dispose();
				break;
			}

			ClientDemo.class.notify();
		}

		// C: 创建对象调用功能，返回一个boolean值
		// UserDao ud = new UserDaoImpl();
		// boolean flag = ud.login(username, password);
		//
		// if(flag){
		// JOptionPane.showMessageDialog(this, "恭喜你登录成功");
		// }else{
		// JOptionPane.showMessageDialog(this, "用户名或密码有误");
		// this.jtfUsername.setText("");
		// this.jpfPassword.setText("");
		// this.jtfUsername.requestFocus();
		// }
		// D：更具boolean值给出提示
	}

	private void jButton3ActionPerformed(ActionEvent evt) {
		RegistFrame rf = null;
		rf = new RegistFrame(oos);

		// this.setVisible(false);
		rf.setVisible(true);
		// window里的方法，释放资源
		this.dispose();
	}

	private void jButton2ActionPerformed(ActionEvent evt) {
		// 重置按钮 -- 置空
		this.jtfUsername.setText("");
		this.jpfPassword.setText("");
	}

	private void selectBoxActionPerformed(ActionEvent evt) {
		// TODO add your handling code here:
	}

	public void run() {

		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				new LoginFrame(oos).setVisible(true);
			}
		});
	}

	private void regUserNamePwd(String uName, String uPwd) {
		// 用正则表达式做数据校验
		// 定义规则
		// 用户名规则
		String uNameRegex = "[a-zA-Z]{5}";
		// 密码规则
		String uPwdRegex = "\\w{6,12}";

		// 校验
		if (!uName.matches(uNameRegex)) {
			JOptionPane.showMessageDialog(this, "用户名不满足条件（5个英文字母组成）");
			this.jtfUsername.setText("");
			// 获得光标
			this.jtfUsername.requestFocus();
			return;
		}

		if (!uPwd.matches(uPwdRegex)) {
			JOptionPane.showMessageDialog(this, "密码不满足条件（6-12个任意单词字符）");
			this.jpfPassword.setText("");
			// 获得光标
			this.jpfPassword.requestFocus();
			return;
		}
	}

}
