package com.bwf.server;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bwf.bean.User;
import com.bwf.jar.MyRequest;
import com.bwf.jar.MyResponse;
import com.bwf.server.util.FileUtil;
import com.bwf.service.UserService;
import com.bwf.service.impl.UserServiceImpl;



public class ServerThread extends Thread {

	private Socket socket;
	
	//这个记录所有在线的客户
	public static Map<String, ObjectOutputStream> onLineMap = new HashMap<>();

	public ServerThread(Socket socket) {
		super();
		this.socket = socket;
	}

	@Override
	public void run() {
		ObjectInputStream ois = null;
		ObjectOutputStream oos = null;
		try {
			ois = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
			oos = new ObjectOutputStream(new BufferedOutputStream(socket.getOutputStream()));
			MyRequest request = null;
			
			UserService us = new UserServiceImpl();
			
			while ((request = (MyRequest) ois.readObject()) != null) {
				System.out.println(request);//测试通信
				
				MyResponse response = null;//日志功能暂时不做，但是保留这个
				
				switch (request.getType()) {
				case MyRequest.TYPE_REGIST:
					try {
						response = us.doRegist(request, oos);
					} catch (Exception e) {
						System.out.println(e.getMessage());
					}
					break;
				case MyRequest.TYPE_LOGIN:
					try {
						response = us.doLogin(request, oos);
					} catch (Exception e) {
						System.out.println(e.getMessage());
					}
					break;
				case MyRequest.TYPE_LOGOUT:
					delClientUser(request);
					break;

				default:
					break;
				}

//				if(response != null) {
//					LogRecord log = new LogRecord(new Date(), socket.getInetAddress().toString(), request, response);
//					FileUtil.saveLog(log);
//				}
			}

		} catch (SocketException e) {
			
			Iterator<Entry<String, ObjectOutputStream>> iterator = onLineMap.entrySet().iterator();
			while(iterator.hasNext()) {
				Entry<String, ObjectOutputStream> next = iterator.next();
				if(next.getValue().equals(oos)) {
					iterator.remove();
					System.out.println(next.getKey()+"删除成功！！");
				}
			}
			
			System.out.println("客户端退出！！");
			return;
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} 

	}

	private void delClientUser(MyRequest request) {
		String name = request.getUmap().get(MyRequest.MEG_USERNAME);
		onLineMap.remove(name);
	}

//	private String getNewContent(String content, String name, String str) {
//		Date date = new Date();
//		SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd HH:mm:ss  ");
//		String s_date = sdf.format(date);
//
//		StringBuilder sb = new StringBuilder(s_date).append(name).append(str).append(" ： ").append(content);
//		return sb.toString();
//	}



}
